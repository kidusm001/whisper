rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // ---------------------------------------------------
    // Helper Functions
    // ---------------------------------------------------
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // ---------------------------------------------------
    // COMMENTS & REPLIES (Top-Level & Under Posts)
    // ---------------------------------------------------
    
    // Top-level comments collection (used for some apps)
    match /comments/{commentId} {
      allow read: if true;
      
      // Allow creation if the authenticated user is identified in one or more ways.
      // (No requirement that the comment be on your own post.)
      allow create: if isAuthenticated() &&
        (
          request.resource.data.authorId == request.auth.uid ||
          request.resource.data.creatorId == request.auth.uid ||
          request.resource.data.uid == request.auth.uid
        );
      
      // Only the original author (as indicated by authorId) can update or delete.
      allow update: if isAuthenticated() &&
        request.auth.uid == resource.data.authorId;
      
      allow delete: if isAuthenticated() &&
        request.auth.uid == resource.data.authorId;
    }
    
    // Comments under posts (if you use a subcollection for comments on posts)
    match /posts/{postId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() &&
         ( request.auth.uid == resource.data.authorId ||
           request.resource.data.diff(resource.data).affectedKeys().hasOnly(['commentCount'])
         );
      allow delete: if isAuthenticated() &&
         request.auth.uid == resource.data.authorId;
      
      match /comments/{commentId} {
        allow read: if true;
        allow create: if isAuthenticated() &&
          (
            request.resource.data.authorId == request.auth.uid ||
            request.resource.data.creatorId == request.auth.uid ||
            request.resource.data.uid == request.auth.uid
          );
        allow update, delete: if isAuthenticated() &&
          request.auth.uid == resource.data.authorId;
      }
      
      // Likes for posts
      match /likes/{likeId} {
        allow read: if true;
        allow create, delete: if isAuthenticated();
      }
    }
    
    // ---------------------------------------------------
    // COMMENT LIKES
    // ---------------------------------------------------
    match /comment_likes/{likeId} {
      allow read: if true;
      allow write: if isAuthenticated() &&
        likeId.matches(request.auth.uid + '_.*');
    }
    
    // ---------------------------------------------------
    // FOLLOWS
    // ---------------------------------------------------
    match /follows/{followId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow delete: if isAuthenticated() &&
        request.auth.uid == resource.data.followerId;
    }
    
    // ---------------------------------------------------
    // USERS
    // ---------------------------------------------------
    match /users/{userId} {
      allow read: if true;
      allow update: if isAuthenticated() &&
        (
          request.auth.uid == userId ||
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['followerCount', 'followingCount'])
        );
      allow create: if isAuthenticated();
    }
    
    // ---------------------------------------------------
    // CONTENT
    // ---------------------------------------------------
    match /content/{contentId} {
      allow read: if true;
      allow write: if isAuthenticated() &&
        request.auth.uid == resource.data.creatorId;
    }
    
    // ---------------------------------------------------
    // SUBSCRIPTIONS
    // ---------------------------------------------------
    match /subscriptions/{subscriptionId} {
      allow read: if isAuthenticated() && request.auth.uid == resource.data.userId;
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }
    
    // ---------------------------------------------------
    // CHAT (Enhanced Messaging)
    // ---------------------------------------------------
    match /chatRooms/{roomId} {
      // Allow reading a chat room if the user is a participant.
      allow read: if isAuthenticated() &&
        exists(/databases/$(database)/documents/chatRooms/$(roomId)) &&
        request.auth.uid in get(/databases/$(database)/documents/chatRooms/$(roomId)).data.participants;
      
      // Allow creating a chat room if the participant list includes the user,
      // or if one of the redundant identity fields (creatorId or uid) matches.
      allow create: if isAuthenticated() &&
        (
          request.resource.data.participants.hasAny([request.auth.uid]) ||
          request.resource.data.creatorId == request.auth.uid ||
          request.resource.data.uid == request.auth.uid
        ) &&
        request.resource.data.participants.size() == 2;
      
      // Allow updating the chat room (for example, updating lastMessage info)
      // only if the user is a participant.
      allow update: if isAuthenticated() &&
        request.auth.uid in resource.data.participants &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['lastMessage', 'lastMessageTime', 'typing']);
      
      // ----------------------------
      // Messages within a Chat Room
      // ----------------------------
      match /messages/{messageId} {
        allow read: if isAuthenticated() &&
          request.auth.uid in get(/databases/$(database)/documents/chatRooms/$(roomId)).data.participants;
        
        // Allow message creation if the user is a participant and the sender identity
        // matches (using multiple redundant fields).
        allow create: if isAuthenticated() &&
          request.auth.uid in get(/databases/$(database)/documents/chatRooms/$(roomId)).data.participants &&
          (
            request.resource.data.senderId == request.auth.uid ||
            request.resource.data.sender == request.auth.uid ||
            request.resource.data.uid == request.auth.uid
          );
        
        // Allow updating a message (e.g. marking it as read) if the sender identity matches.
        allow update: if isAuthenticated() &&
          (
            request.auth.uid == resource.data.senderId ||
            request.auth.uid == resource.data.sender ||
            request.auth.uid == resource.data.uid
          ) &&
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isRead']);
      }
      
      // ----------------------------
      // Typing Indicators
      // ----------------------------
      match /typing/{userId} {
        allow read: if isAuthenticated() &&
          request.auth.uid in get(/databases/$(database)/documents/chatRooms/$(roomId)).data.participants;
        allow write: if isAuthenticated() && request.auth.uid == userId;
      }
    }
    
    // ---------------------------------------------------
    // TIERS
    // ---------------------------------------------------
    match /tiers/{tier} {
      allow read: if true;
      allow write: if isAuthenticated() &&
        request.auth.token.admin == true;
    }
  }
}
