rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Add follows collection rules
    match /follows/{followId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow delete: if isAuthenticated() && (
        request.auth.uid == resource.data.followerId
      );
    }

    // User collection rules
    match /users/{userId} {
      allow read: if true;
      allow update: if isAuthenticated() && (
        request.auth.uid == userId || 
        (request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['followerCount', 'followingCount']))
      );
      allow create: if isAuthenticated();
    }

    // Post rules - updated to handle null isDeleted field
    match /posts/{postId} {
      allow read, list: if true;
      allow create, update: if isAuthenticated();
      allow delete: if isAuthenticated() && request.auth.uid == resource.data.authorId;

      // Comments subcollection
      match /comments/{commentId} {
        allow read: if true;
        allow create: if isAuthenticated();
        allow update, delete: if isAuthenticated() && resource.data.authorId == request.auth.uid;
      }
      
      // Likes subcollection
      match /likes/{likeId} {
        allow read: if true;
        allow create, delete: if isAuthenticated();
      }
    }

    // Content access rules
    match /content/{contentId} {
      allow read: if true;
      allow write: if isAuthenticated() && request.auth.uid == resource.data.creatorId;
    }

    // Subscription rules
    match /subscriptions/{subscriptionId} {
      allow read: if isAuthenticated() && request.auth.uid == resource.data.userId;
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // Tier access rules
    match /tiers/{tier} {
      allow read: if true;
      allow write: if isAuthenticated() && request.auth.token.admin == true;
    }
  }
}