rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // -------------------------------------------------------------------
    // Helper Functions
    // -------------------------------------------------------------------
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isChatParticipant(participants) {
      return isAuthenticated() && participants.has(request.auth.uid);
    }

    // -------------------------------------------------------------------
    // COMMENTS (Anyone can comment or reply) - UNTOUCHED
    // -------------------------------------------------------------------
    match /comments/{commentId} {
      allow read: if true;

      allow create: if isAuthenticated() &&
        request.resource.data.authorId == request.auth.uid &&
        request.resource.data.postId is string &&
        request.resource.data.content is string &&
        request.resource.data.content.size() > 0 &&
        request.resource.data.content.size() <= 10000 &&
        (
          (
            (!('parentId' in request.resource.data) || request.resource.data.parentId == null) &&
            (!('replyToId' in request.resource.data) || request.resource.data.replyToId == null) &&
            (!('replyToName' in request.resource.data) || request.resource.data.replyToName == null)
          )
          ||
          (
            request.resource.data.parentId is string &&
            request.resource.data.replyToId is string &&
            request.resource.data.replyToName is string
          )
        );

      // Allow update if:
      // 1. User is the original author
      // 2. The only changes are: likesCount, likedBy, replyCount, updatedAt
      allow update: if isAuthenticated() &&
        (request.auth.uid == resource.data.authorId ||
         request.resource.data.diff(resource.data).affectedKeys().hasOnly([
           'likesCount', 'likedBy', 'replyCount', 'updatedAt'
         ])
        );

      // Allow delete ONLY if the comment author is the one deleting it
      allow delete: if isAuthenticated() &&
        request.auth.uid == resource.data.authorId;
    }

    // -------------------------------------------------------------------
    // POSTS (and its comments subcollection)
    // -------------------------------------------------------------------
    match /posts/{postId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() &&
        ( request.auth.uid == resource.data.authorId ||
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['commentCount'])
        );
      allow delete: if isAuthenticated() && request.auth.uid == resource.data.authorId;

      //  Ensure users can comment on posts correctly (though main logic is in /comments)
      match /comments/{commentId} {
        allow read: if true;
        allow create: if isAuthenticated() &&
          request.resource.data.authorId == request.auth.uid &&
          request.resource.data.postId == postId && // Ensure comment belongs to this post
          request.resource.data.content is string &&
          request.resource.data.content.size() > 0 &&
          request.resource.data.content.size() <= 10000 &&
          (
            (!('parentId' in request.resource.data) || request.resource.data.parentId == null) ||
            request.resource.data.parentId is string
          );
        allow update, delete: if isAuthenticated() &&
          request.auth.uid == resource.data.authorId;
      }
    }

    // -------------------------------------------------------------------
    // CHAT ROOMS (Users can only access their own chat rooms)
    // -------------------------------------------------------------------
    match /chatRooms/{roomId} {
      // Allow read if user is a participant
      allow read: if isAuthenticated() &&
        ((resource == null) || (request.auth.uid in resource.data.participants));

      // Allow create with proper validation
      allow create: if isAuthenticated() &&
        request.resource.data.participants is list &&
        request.resource.data.participants.size() == 2 &&
        request.auth.uid in request.resource.data.participants;

      // Allow update if user is a participant
      allow update: if isAuthenticated() &&
        request.auth.uid in resource.data.participants;

      // Messages inside chat rooms
      match /messages/{messageId} {
        // Allow read if user is a participant in the parent chatRoom
        allow read: if isAuthenticated() &&
          request.auth.uid in get(/databases/$(database)/documents/chatRooms/$(roomId)).data.participants;

        // Allow create if:
        // 1. User is authenticated
        // 2. User is a participant in the parent chatRoom
        // 3. The senderId matches the current user
        // 4. The receiverId is in the participants list
        // 5. Content is a string with size limits
        allow create: if isAuthenticated() &&
          request.auth.uid in get(/databases/$(database)/documents/chatRooms/$(roomId)).data.participants &&
          request.resource.data.senderId == request.auth.uid &&
          request.resource.data.receiverId in get(/databases/$(database)/documents/chatRooms/$(roomId)).data.participants &&
          request.resource.data.content is string &&
          request.resource.data.content.size() > 0 &&
          request.resource.data.content.size() <= 5000;

        // Prevent updating messages
        allow update: if false;

        // Allow deleting a message only if the sender is deleting it
        allow delete: if isAuthenticated() &&
          request.auth.uid == resource.data.senderId;
      }
    }

    // -------------------------------------------------------------------
    // USERS
    // -------------------------------------------------------------------
    match /users/{userId} {
      allow read: if true;
      allow update: if isAuthenticated() &&
        ( request.auth.uid == userId ||
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['followersCount', 'followingCount'])
        );
      allow create: if isAuthenticated();
    }

    // -------------------------------------------------------------------
    // FOLLOWS
    // -------------------------------------------------------------------
    match /follows/{followId} {
      allow read: if true;
      allow create: if isAuthenticated() &&
        request.resource.data.followerId == request.auth.uid;
      allow delete: if isAuthenticated() &&
        request.auth.uid == resource.data.followerId;
    }

    // -------------------------------------------------------------------
    // CONTENT (Unchanged)
    // -------------------------------------------------------------------
    match /content/{contentId} {
      allow read: if true;
      allow write: if isAuthenticated() &&
        request.auth.uid == resource.data.creatorId;
    }

    // -------------------------------------------------------------------
    // SUBSCRIPTIONS (Unchanged)
    // -------------------------------------------------------------------
    match /subscriptions/{subscriptionId} {
      allow read: if isAuthenticated() &&
        request.auth.uid == resource.data.userId;
      allow create: if isAuthenticated() &&
        request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() &&
        resource.data.userId == request.auth.uid;
    }

    // -------------------------------------------------------------------
    // TIERS (Unchanged)
    // -------------------------------------------------------------------
    match /tiers/{tier} {
      allow read: if true;
      allow write: if isAuthenticated() &&
        request.auth.token.admin == true;
    }
  }
}